#!/usr/local/bin/perl
#uyghurscript
#Convert between different Uyghur alphabets
#Author: Stephen Politzer-Ahles
#Last modified: 2009-11-30
#You are free to use or modify this code as you see fit, but please credit accordingly and do not redistribute for profit.

use CGI qw( :standard );                                   	#Modules
use Encode;

our %codes = ("h" => "06BE FBAA FBAB FBAC FBAD",
	 	"y" => "064A FEF1 FEF2 FEF3 FEF4",
		"'" => "0626 FE89 FE8A FE8B FE8C", 
		"s" => "0633 FEB1 FEB2 FEB3 FEB4",
		"u" => "06C7 FBD7 FBD8",
		"t" => "062A FE95 FE96 FE97 FE98",
		"j" => "062C FE9D FE9E FE9F FEA0",
		"&#x00E9;" => "06D0 FBE4 FBE5 FBE6 FBE7",
		"l" => "0644 FEDD FEDE FEDF FEE0",
		"zh" => "0698 FB8A FB8B",
		"gh" => "063A FECD FECE FECF FED0",
		"o" => "0648 FEED FEEE",
		"x" => "062E FEA5 FEA6 FEA7 FEA8",
		"r" => "0631 FEAD FEAE",
		"n" => "0646 FEE5 FEE6 FEE7 FEE8",
		"i" => "0649 FEEF FEF0",
		"m" => "0645 FEE1 FEE2 FEE3 FEE4",
		"z" => "0632 FEAF FEB0",
		"f" => "0641 FED1 FED2 FED3 FED4",
		"&#x00F6;" => "06C6 FBD9 FBDA",
		"&#x00FC;" => "06C8 FBDB FBDC",
		"q" => "0642 FED5 FED6 FED7 FED8",
		"b" => "0628 FE8F FE90 FE91 FE92",
		"ch" => "0686 FB7A FB7B FB7C FB7D",
		"g" => "06AF FB92 FB93 FB94 FB95",
		"a" => "0627 FE8D FE8E",
		"sh" => "0634 FEB5 FEB6 FEB7 FEB8",
		"d" => "062F FEA9 FEAA",
		"ng" => "06AD FBD3 FBD4 FBD5 FBD6",
		"e" => "06D5",
		"k" => "0643 FED9 FEDA FEDB FEDC",
		"v" => "06CB FBDE FBDF",
		"&#x003F;" => "061F");				#Question mark must be encoded, or else it messes
									# up regex later

if( $ENV{'CONTENT_LENGTH'} > 0 ){                              #If input has been entered
	$origin = param("origin");
	$str = param("str");
	chomp( $ugstr );
	if( $origin eq "Arabic" ){ $latstr = convert_ug_lat( $str ); $ugstr = $str;}
	elsif( $origin eq "Latin" ){ $ugstr = convert_lat_ug( $str ); $latstr = $str;}

}
else{ $str=""; }                                           #Else, $str is an empty string

print <<HTML1;
Content-Type: text/html; charset=UTF-8

<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "DTD/xhtml1-transitional.dtd">
<html lang="en">
    <head>
        <meta http-equiv="Content-Type" content="text/html;charset=UTF-8" />
        <title>Convert Uyghur script</title>
        <link href="/default/pubprwb.cc.ku.edu/css/peoplestyle.css" title="people.ku.edu stylesheet" />
    </head>

    <body style="background:#DCDCDC">
       
        <center><h2>Uyghur script converter</h2></center>
        <table width="75%" align="center">
            <tr>
                <td>
                    <p align="center"><a href="http://www.ethnologue.com/show_language.asp?code=uig">Uyghur</a> is
                                      a Turkic language spoken throughout Central Asia, particularly in the
                                      Xinjiang province of western People's Republic of China. Uyghur has 
                                      <a href="http://en.wikipedia.org/wiki/Uyghur_alphabet">several alphabets</a>,
                                      the most common of which are an Arabic-based alphabet and a Latin-based
                                      alphabet. This tool will convert between the two. It may be updated in the
                                      future to also handle two other Uyghur alphabets, the Cyrillic Uyghur alphabet
                                      and the Pinyin-based Uyghur alphabet.</p>
                </td>
            </tr>
        </table>                 

        <hr>
        <a name="results">
        <form method="post" action="http://people.ku.edu/~sjpa/cgi-bin/uyghurscript.pl">
           <p align="center"><b><u>Type or paste a string of characters into the box and click submit.</u></b></p>
           <center><textarea cols=80 name="str">$str</textarea></center>
           <p align="center">What script is your input in?
                             <input type="radio" name="origin" value="Arabic">Arabic</input>
                             <input type="radio" name="origin" value="Latin">Latin</input>
                             <input type="submit" value="submit"></p>
        </form>
HTML1

if( $ENV{'CONTENT_LENGTH'} > 0 ){     #If input has been entered
    print <<HTMLresults;
    <p align="center"><b>Latin Y&#x00E9;ziqi</b>: $latstr</p>
    <p align="center"><b>Arabic</b>: $ugstr</p>
HTMLresults

print <<HTMLfooter;
        <hr>
        <p style="font-size:70%">Script by Stephen Politzer-Ahles. Last modified on <a href=
                                 "/~sjpa/uyghurscript_code_20091130.txt">2009-11-30</a>. If you experience
                                 an error, contact me at politzerahless <img src="/~sjpa/at.jpg" alt="(at)"
                                 height="10px" width="10px"> gmail <img src="/~sjpa/dot.jpg" alt="(dot)"
                                 height="10px" width="10px"> com.
                                 <span style="float:right"><a href="/~sjpa/chinesetools.html">back to 
                                 Chinese tools</a></span></p>

    </body>
</html>
HTMLfooter

}

sub hex_to_dec{
		#Function documentation
		#Converts a single hex number (string format) to a decimal number

		$hex = shift();
		$dec = 0;

		$pos = 0;
		
		while( $hex ){		
  		$digit = numberify( chop( $hex ) );
			$dec += $digit*( 16**$pos );
			$pos += 1;
		}

		
		return $dec;
}

sub dec_to_hex{
		$dec = shift();
		$hex = '';
		
		while( $dec ){
			$digit = hexnumberify( $dec % 16 );
			$hex = $digit . $hex;
			$dec = int( $dec/16 );
		}
						#Make sure the hex number is 4 digits long
		while( length( $hex ) < 4 ){ $hex = "0" . $hex; }

		return $hex;
}

sub numberify{
		#Function documentation
		#Takes a single hex digit in string format and converts it to a number
    		$x = shift();
		
		if( $x eq "1" ){ $x = 1; }
		elsif( $x eq "2" ){ $x = 2; }
		elsif( $x eq "3" ){ $x = 3; }
		elsif( $x eq "4" ){ $x = 4; }
		elsif( $x eq "5" ){ $x = 5; }
		elsif( $x eq "6" ){ $x = 6; }
		elsif( $x eq "7" ){ $x = 7; }
		elsif( $x eq "8" ){ $x = 8; }
		elsif( $x eq "9" ){ $x = 9; }
		elsif( $x eq "A" ){ $x = 10; }
		elsif( $x eq "B" ){ $x = 11; }
		elsif( $x eq "C" ){ $x = 12; }
		elsif( $x eq "D" ){ $x = 13; }
		elsif( $x eq "E" ){ $x = 14; }
		elsif( $x eq "F" ){ $x = 15; }
		
		return $x
}

sub hexnumberify{
		#Function documentation
		#Takes a decimal number below 16 in number format and converts it to a hex
		# digit
    $x = shift();
		
		if( $x < 10 ){ }#Do nothing
		elsif( $x == 10 ){ $x = 'A'; }
		elsif( $x == 11 ){ $x = 'B'; }
		elsif( $x == 12 ){ $x = 'C'; }
		elsif( $x == 13 ){ $x = 'D'; }
		elsif( $x == 14 ){ $x = 'E'; }
		elsif( $x == 15 ){ $x = 'F'; }
		
		return $x
}

sub convert_ug_lat{
	#What still needs to be done: List of proper nouns that must be capitalized

	$string = shift();
		
	$decodedstr = decode( "utf8", $string );           	#Decode characters from text into binary
	$newstr = "";
	while( $x = chop($decodedstr) ){				#Get one character off the end
		$x = dec_to_hex( ord( $x ) );

		$matched = 0;								
		foreach $item ( keys(%codes) ){			#Go through the list of codes
			if( $codes{ $item } =~ m/$x/ ){		#If the code matches
		 		$newstr = $item . $newstr;		#Add the letter
				$matched = 1;				#Flag to know that this was an Arabic letter
			}
		}

		if( $matched == 0){					#If no match (i.e., not Arabic script):
			$letter = encode("utf8", chr( hex_to_dec($x) ) );	
			$newstr = $letter . $newstr;		#Just concatenate the plain letter
		}

		$onestr = $newstr;
		$onestr =~ s/(^|\s)'/\1/;				#Remove hamza-apostrophe from word beginning
		$onestr =~ s/(^|\.\s)(\w)/\1\u\2/g;		#Capitalizing
		#$onestr =~ s/\A(\w)/\u\1/g;			#Capitalizing

	}
	return $onestr;

}

sub convert_lat_ug{
	#Tasks remaining: add list of words with word-medial hamza, like sun'i and din'i
	$string = shift();
	$newstr = "";
	while( $string ){							#Decode only the fancies. Keep regular letters as regular letters
		$string = decode("utf8", $string);
		 while( $x = chop($string) ){			 	#One at a time off the end of the string
			$x = dec_to_hex( ord( $x ) );			#To hex
			$x = "&#x" . $x . ";";
			foreach( keys(%codes) ){
				$matched = 0;
				if( $x eq $_ ){ $matched = 1; last;}	#If it's one of the fancies: keep as code									 
			}
			
			if( $matched == 0 ){		 			#If it's not a fancy: change back to text
				$x =~ s/&#x(\S{4});/\1/; 
				$x = encode("utf8", chr( hex_to_dec( $x ) ) );
			}
			$decodedstr = $x . $decodedstr;
								
		}
	}
					 
	while( $decodedstr ){				 	 	#Actual conversion
		$lastdecodedstr = $decodedstr;				#Catch bigraphs and fancies in this regex
		$decodedstr =~ s/^(&#x00F6;|&#x00FC;|&#x00E9;|&#x003F;|zh|gh|sh|ch|ng|[hy'sutjloxrnimzfqbgadekv .,;!?"])//i;
		if ($decodedstr eq $lastdecodedstr){ print "Aborting.\n"; last; }	#Error handler
					 
		$letter = $1;	 						#Harvest the letter
		$ugletter = $letter;
		foreach $code (keys(%codes)){
			if( $letter =~ m/\A$code\Z/i ){     		#If it corresponds to an Arabic letter, get the letter
				$ugletter = $codes{ $code };						
				$ugletter =~ s/(\S{4}).*/&#x\1;/; 		#Strip extra codes	 
			}	 						#Otherwise (i.e., if it's punc.), just keep it as is.
		}
					 
		$newstr = $newstr . $ugletter; 
		$newstr =~ s/(\s)(&#x06D0;|&#x06C6;|&#x06C8;|&#x06C7;|&#x0648;|&#x0649;|&#x0627;|&#x06D5;)/\1&#x0626;\2/g;	 #Add hamza
	}
		
	return $newstr;

}
exit;