#!/usr/local/bin/perl
#unicode_converter.pl
#Converts special characters to Unicode hex and decimal values
#Author: Stephen Politzer-Ahles
#Last modified: 2009-11-18
#You are free to use or modify this code as you see fit, but please credit accordingly and do not redistribute for profit.

use CGI qw( :standard );                                   	#Modules
use Encode;

								### The next bit does the actual conversion
if( $ENV{'CONTENT_LENGTH'} > 0 ){				#If input has been entered in the web page, get counts for the input......
    $hanstr = param( "hanstr" );				#Get the input from a web form
    chomp( $hanstr );	                                  	#  and store in the variable $hanstr

    $decodedstr = decode( "utf8", $hanstr );			#Decode characters from text into binary
								### Initialize some strings that will have codes in them later
    $codes_dec_mixed = "";					#This will be a string where just the special characters are in Unicode decimal, and the plain characters are just themselves
    $codes_dec = "";						#This will be a string where all characters are in Unicode decimal
    $codes_hex_mixed = "";					#This will be a string where just the special characters are in Unicode hexadecimal, and the plain characters are just themselves
    $codes_hex = "";						#This will be a string where all characters are in Unicode hexadecimal

    while( $x = chop( $decodedstr ) ){				#Take one character at a time off the end of the string
        $xcopy = $x;						#A copy of the character
        if( ord($x) <= 255 ){					#If the character is plain ASCII (i.e., below 255)
            $codes_dec_mixed = $x . $codes_dec_mixed;		#  then just append it to the mixed strings
            $codes_hex_mixed = $x . $codes_hex_mixed;
        }
        else{							#Otherwise appdend its codepoint along with the Unicode escape characters
            $codes_dec_mixed = "&amp;#" . ord($x) . ";" . $codes_dec_mixed;
								#For the hexadecimal string, convert from decimal to hexadecimal (see the dec_to_hex() function below)
            $codes_hex_mixed = "&amp;#x" . dec_to_hex( ord($x) ) . ";" . $codes_hex_mixed;
        } 
        $codes_dec = "&amp;#" . ord($xcopy) . ";" . $codes_dec;	#Regardless of whether the character is plain or special, convert it and put it on the non-mixed strings
	$codes_hex = "&amp;#x" . dec_to_hex( ord($xcopy) ) . ";" . $codes_hex;
    }
}
else{ $hanstr=""; }						#If input has not been entered, $hanstr is an empty string (so don't do anything, just show the website)

								### The next bit shows the website
print <<HTML1;
Content-Type: text/html; charset=UTF-8

<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "DTD/xhtml1-transitional.dtd">
<html lang="en">
    <head>
        <meta http-equiv="Content-Type" content="text/html;charset=UTF-8" />
        <title>Convert special characters to Unicode</title>
        <link href="/default/pubprwb.cc.ku.edu/css/peoplestyle.css" title="people.ku.edu stylesheet" />
    </head>

    <body style="background:#DCDCDC">
       
        <center><h2>Characters-to-Unicode converter</h2></center>
        <table width="75%" align="center">
            <tr>
                <td>
                    <p>This tool will convert special characters (such as CJK characters, special IPA characters,
                       and other non-ASCII scripts) into Unicode decimal and hex code points, along with the HTML
                       escape sequences that allow the codes to display as characters. The output of this tool can
                       be pasted directly into HTML source code (for example) to display characters that are not
                       supported otherwise. Code points for individual characters are available in the <a href=
                       "http://www.unicode.org/charts/unihan.html">Unihan database</a>, but can only be
                       looked up one character at a time; with this tool, you can enter as many characters
                       as you want at once.</p>
                </td>
            </tr>
        </table>                 

        <hr>
        <a name="results">
        <form method="post" action="http://www.nyu.edu/cgi-bin/cgiwrap/spa268/unicode_converter.pl#results">
           <p align="center"><b><u>Type or paste a string of characters into the box and click submit.</u></b></p>
           <center><textarea cols=80 name="hanstr">$hanstr</textarea> <input type="submit" value="submit"></center>
        </form>
HTML1

if( $ENV{'CONTENT_LENGTH'} > 0 ){				#If input has been entered, then show the results in the website
    print <<HTMLresults;
    <center>
        <table width="50%" border="0">
            <tr>
                <th>Unicode hex (converted all characters)</th>
                <th>Unicode hex (only converted non-basic characters)</th>
            </tr>
            <tr>
                <td><textarea cols=50 rows=10 name="codes_hex">$codes_hex</textarea></td>
                <td><textarea cols=50 rows=10 name="codes_hex_mixed">$codes_hex_mixed</textarea></td>

            </tr>          
            <tr>
                <th>Unicode decimal (converted all characters)</th>
                <th>Unicode decimal (only converted non-basic characters)</th>
            </tr>
            <tr>
                <td><textarea cols=50 rows=10 name="codes_dec">$codes_dec</textarea></td>
                <td><textarea cols=50 rows=10 name="codes_dec_mixed">$codes_dec_mixed</textarea></td>
            </tr>
        </table>
    </center>
HTMLresults

}
								#Regardless of whether or not input has been entered, show the footer of the website
print <<HTMLfooter;
        <hr>
        <p style="font-size:70%">If this tool is not working, try <a href=
                                 "http://pinyin.info/tools/converter/chars2uninumbers.html"> this nearly
                                 identical tool</a> by Mark Swofford of PinyinInfo</p>
        <p style="font-size:70%">Script by Stephen Politzer-Ahles. Last modified on 2009-11-18.  If you experience
                                 an error, contact me at politzerahless <img src="/projects/politzer-ahles/at.jpg" alt="(at)"
                                 height="10px" width="10px"> gmail <img src="/projects/politzer-ahles/dot.jpg" alt="(dot)"
                                 height="10px" width="10px"> com.</p>
        <dl style="font-size:70%">Version history:
            <dd>2009-10-25: Created</dd>
            <dd><a href="/projects/politzer-ahles/codearchive/unicode_converter_code_20091118.txt">2009-11-18</a>: Added hex functionality</dd>
        </dl>



    </body>
</html>
HTMLfooter


sub hex_to_dec{
		#Function documentation
		#Takes a hex number and turns it into a decimal number, which is returned

		$hex = shift();					#Get the argument
		$dec = 0;					#Initialize the $dec variable to 0	

		$pos = 0;					#The place (start at ones place, then go up to 10s, 100s, etc.)
		
		while( $hex ){		
  			$digit = numberify( chop( $hex ) );	#Get the last hex digit from the number and convert it to decimal
			$dec += $digit*( 16**$pos );		#Add that to $dec
			$pos += 1;				#Go up to the next place
		}
		
		return $dec;
}

sub dec_to_hex{
		#Function documentation
		#Takes a decimal number and turns it into a decimal number, which is returned

		$dec = shift();					#Get the argument
		$hex = '';					#Initialize the $hex variable to an empty string
		
		while( $dec ){
			$digit = hexnumberify( $dec % 16 );	#Get the last bit of the decimal (using modulus division) and convert it into a hex digit
			$hex = $digit . $hex;			#Add the digit to $hex
			$dec = int( $dec/16 );			#Go up to the next place of the decimal (by removing the part from the end that was just converted to hex)
		}

		return $hex;
}

sub numberify{
		#Function documentation
		#Takes a single hex digit in string format (from 1 to F) and converts it to a decimal number
    		$x = shift();					#Get the argument
		
		if( $x eq "1" ){ $x = 1; }			#Take the hex digit and convert it to a decimal number
		elsif( $x eq "2" ){ $x = 2; }
		elsif( $x eq "3" ){ $x = 3; }
		elsif( $x eq "4" ){ $x = 4; }
		elsif( $x eq "5" ){ $x = 5; }
		elsif( $x eq "6" ){ $x = 6; }
		elsif( $x eq "7" ){ $x = 7; }
		elsif( $x eq "8" ){ $x = 8; }
		elsif( $x eq "9" ){ $x = 9; }
		elsif( $x eq "A" ){ $x = 10; }
		elsif( $x eq "B" ){ $x = 11; }
		elsif( $x eq "C" ){ $x = 12; }
		elsif( $x eq "D" ){ $x = 13; }
		elsif( $x eq "E" ){ $x = 14; }
		elsif( $x eq "F" ){ $x = 15; }
		
		return $x
}

sub hexnumberify{
		#Function documentation
		#Takes a decimal number below 16 in number format and converts it to a hex digit
    		$x = shift();					#Get the argument
		
		if( $x < 10 ){ }				#If the decimal is below 10, do nothing
		elsif( $x == 10 ){ $x = 'A'; }			#If the decimal is above 10, turn it into one of the hex letters
		elsif( $x == 11 ){ $x = 'B'; }
		elsif( $x == 12 ){ $x = 'C'; }
		elsif( $x == 13 ){ $x = 'D'; }
		elsif( $x == 14 ){ $x = 'E'; }
		elsif( $x == 15 ){ $x = 'F'; }
		
		return $x
}


exit;