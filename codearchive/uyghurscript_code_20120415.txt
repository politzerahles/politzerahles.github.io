#!/usr/local/bin/perl
#uyghurscript
#Convert between different Uyghur alphabets
#Author: Stephen Politzer-Ahles
#Last modified: 2012-04-15
#You are free to use or modify this code as you see fit, but please credit accordingly and do not redistribute for profit.

use CGI qw( :standard );                                   	#Modules
use Encode;

our %latincodes = ("h" => "06BE FBAA FBAB FBAC FBAD",		#Keys in this hash are characters used in Uyghur Latin script; values
	 	"y" => "064A FEF1 FEF2 FEF3 FEF4",		#  are corresponding Unicode values for Uyghur Arabic Script. (There are
		"'" => "0626 FE89 FE8A FE8B FE8C", 		#  multiple values since most of the Arabic characters have different
		"s" => "0633 FEB1 FEB2 FEB3 FEB4",		#  forms depending on word position. The first value is context-independent,
		"u" => "06C7 FBD7 FBD8",			#  Unicode will figure out how to display it correctly. But input characters
		"t" => "062A FE95 FE96 FE97 FE98",		#  may be context-dependent and show up as one of the later codes.)
		"j" => "062C FE9D FE9E FE9F FEA0",
		"&#x00EB;" => "06D0 FBE4 FBE5 FBE6 FBE7",
		"&#x00CB;" => "06D0 FBE4 FBE5 FBE6 FBE7",
		"&#x00E9;" => "06D0 FBE4 FBE5 FBE6 FBE7",
		"&#x00C9;" => "06D0 FBE4 FBE5 FBE6 FBE7",
		"l" => "0644 FEDD FEDE FEDF FEE0",
		"zh" => "0698 FB8A FB8B",
		"gh" => "063A FECD FECE FECF FED0",
		"o" => "0648 FEED FEEE",
		"x" => "062E FEA5 FEA6 FEA7 FEA8",
		"r" => "0631 FEAD FEAE",
		"n" => "0646 FEE5 FEE6 FEE7 FEE8",
		"i" => "0649 FEEF FEF0",
		"m" => "0645 FEE1 FEE2 FEE3 FEE4",
		"z" => "0632 FEAF FEB0",
		"f" => "0641 FED1 FED2 FED3 FED4",
		"&#x00F6;" => "06C6 FBD9 FBDA",
		"&#x00D6;" => "06C6 FBD9 FBDA",
		"&#x00FC;" => "06C8 FBDB FBDC",
		"&#x00DC;" => "06C8 FBDB FBDC",
		"q" => "0642 FED5 FED6 FED7 FED8",
		"b" => "0628 FE8F FE90 FE91 FE92",
		"p" => "067E FB56 FB57 FB58 FB59",
		"ch" => "0686 FB7A FB7B FB7C FB7D",
		"g" => "06AF FB92 FB93 FB94 FB95",
		"a" => "0627 FE8D FE8E",
		"sh" => "0634 FEB5 FEB6 FEB7 FEB8",
		"d" => "062F FEA9 FEAA",
		"ng" => "06AD FBD3 FBD4 FBD5 FBD6",
		"e" => "06D5",
		"k" => "0643 FED9 FEDA FEDB FEDC",
		"v" => "06CB FBDE FBDF",
		"w" => "06CB FBDE FBDF",
		"," => "060C",
		"\"" => "00AB 00BB 201C 201D",
		"$#x0030;" => "0030",
		"&#x003F;" => "061F");				#These last two are question marks and zeros. They must be encoded, or else
								# they mess up regex and other things later

								### The next bit does the actual conversion.
if( $ENV{'CONTENT_LENGTH'} > 0 ){				#If input has been entered in the web page, convert the input......
	$origin = param("origin");				#Get the input from a web form. $origin is the script that the input was entered in;
	$str = param("str");					#  $str is the input itself
	chomp( $str );
	if( $origin eq "Arabic" ){				#If the input was Arabic, run the functions to convert it to Latin, Pinyin, and Cyrillic
		$latstr = convert_ug_lat( $str );		#  (see the functions at the end of the script). Most of the other scripts go through Latin,
		$ugstr = $str;					#  so here we first convert the Uyghur to Latin and then do the rest.
		$pinstr = convert_lat_pin( $latstr, "coded" );
		$cyrstr = convert_lat_cyr( $latstr, "coded" );
	}
	elsif( $origin eq "Latin" ){				#If the input was Latin, run the functions to convert it to Arabic, Pinyin, and Cyrillic
		$ugstr = convert_lat_ug( $str );		#  (see the functions at the end of the script)
		$latstr = $str;
		$pinstr = convert_lat_pin( $latstr, "uncoded" );
		$cyrstr = convert_lat_cyr( $latstr, "uncoded" );
	}
	elsif( $origin eq "Pinyin" ){ }				#If the input was Pinyin or Cyrillic, do nothing (these aren't implemented yet)
	elsif( $origin eq "Cyrillic" ){ }

}
else{ $str=""; }						#If input has not been entered, $str is an empty string (so don't do anything, just show the website)

								### The next bit shows the website
print <<HTML1;
Content-Type: text/html; charset=UTF-8

<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "DTD/xhtml1-transitional.dtd">
<html lang="en">
    <head>
        <meta http-equiv="Content-Type" content="text/html;charset=UTF-8" />
        <title>Convert Uyghur script</title>
        <link rel="stylesheet" type="text/css" href="/~sjpa/stevetools_stylesheet.css" />
    </head>

    <body>
       
        <h2>Uyghur script converter</h2>
        <p class="center"><a href="http://www.ethnologue.com/show_language.asp?code=uig">Uyghur</a> is
                                      a Turkic language spoken throughout Central Asia, particularly in the
                                      Xinjiang province of western People's Republic of China. Uyghur has 
                                      <a href="http://en.wikipedia.org/wiki/Uyghur_alphabet">several alphabets</a>,
                                      the most common of which are an Arabic-based alphabet and a Latin-based
                                      alphabet. This tool will convert between the two. It may be updated in the
                                      future to also handle two other Uyghur alphabets, the Cyrillic Uyghur alphabet
                                      and the Pinyin-based Uyghur alphabet.</p>
         <p class="center"><u>Note on fonts</u>: Fonts that can display Uyghur Arabic script include <a
                                      href="http://www.microsoft.com/typography/fonts/family.aspx?FID=327">Microsoft
                                      Uighur</a> and <a href="http://cooltext.com/Download-Font-Arabic+Typesetting">
                                      Arabic Typesetting</a>. Many Uyghur fonts are available for download at the 
                                      <a href="http://www.ukij.org/fonts/">Uyghur Computer Science Society</a>, and
                                      other Unicode-compliant Arabic fonts are available at <a
                                      href="http://www.wazu.jp/gallery/Fonts_Uighur.html">Wazu</a>. Arabic script
                                      on this page  will display best if you have one of the Uyghur fonts installed;
                                      if not, your browser will select another Arabic font to use.</p>              

        <hr>
        <form method="post" action="http://people.ku.edu/~sjpa/cgi-bin/uyghurscript.pl">
           <div class="floatingbox">
               <h3>Special characters</h3>
               <b>Latin</b>
               <p align="center">&#x00CB; &#x00EB; &#x00C9; &#x00E9; &#x00D6; &#x00F6; &#x00DC; &#x00FC;</p>
               <b>Pinyin</b>
               <p align="center">&#x018F; &#x0259;  &#x2C6B; &#x2C6C; &#x01A2; &#x01A3; &#x2C69; &#x2C6A;
                                 &#x2C67; &#x2C68; &#x019F; &#x0275; &#x00DC; &#x00FC;</p>
           </div>
           <p class="center"><b><u>Type or paste a string of characters into the box and click submit.</u></b></p>
           <p class="center"><textarea cols=80 name="str"></textarea></p>
           <p class="center">What script is your input in?
HTML1

if( $origin eq "Arabic" ){					#Show the input part of the website with the Arabic radio button selected.
								#  (The reason there are two different versionf of this, Arabic and
								#  Latin, is to keep track of the user's original option. If the user
								#  is converting stuff from Arabic to Latin, it's likely that the next
								#  request will also be Arabic to Latin--i.e., if s/he has a big list of
								#  Arabic words to convert--so this will make sure the radio button is
								#  still set to Arabic. Same thing goes for if the user is originally
								#  converting from Latin to Arabic.)
print <<ARABICSELECTED;
                             <input type="radio" name="origin" value="Arabic" CHECKED>Arabic</input>
                             <input type="radio" name="origin" value="Latin">Latin</input>
				 <!--<input type="radio" name="origin" value="Pinyin">Pinyin-based Latin</input>-->
				 <!--<input type="radio" name="origin" value="Cyrillic">Cyrillic</input>-->
ARABICSELECTED

}
elsif( $origin eq "Latin" ){					#Show the input part of the website with the Latin radio button selected.
								#  (See the comment a few lines up for why this matters.)
print <<LATINSELECTED;
                             <input type="radio" name="origin" value="Arabic">Arabic</input>
                             <input type="radio" name="origin" value="Latin" CHECKED>Latin</input>
				 <!--<input type="radio" name="origin" value="Pinyin">Pinyin-based Latin</input>-->
				 <!--<input type="radio" name="origin" value="Cyrillic">Cyrillic</input>-->
LATINSELECTED

}
else{								#Show the input part of the website.
								#  (If the user hasn't done anything yet, then neither radio button is selected.)
print <<NONESELECTED;
                             <input type="radio" name="origin" value="Arabic">Arabic</input>
                             <input type="radio" name="origin" value="Latin">Latin</input>
				 <!--<input type="radio" name="origin" value="Pinyin">Pinyin-based Latin</input>-->
				 <!--<input type="radio" name="origin" value="Cyrillic">Cyrillic</input>-->
NONESELECTED

}
								#The end of the input form
print <<CLOSEFORM;
                             <input type="submit" value="submit" /></p>
        </form>
CLOSEFORM

if( $ENV{'CONTENT_LENGTH'} > 0 ){				#If input has been entered, then show the results in the website
    print <<HTMLresults;
    <table align="center">
        <tr>
            <td class="left"><b>Latin Y&#x00E9;ziqi</b>:</td>
            <td class="right">$latstr</td>
        </tr>
        <tr>
            <td class="left"><b>Arabic</b>:</td>
            <td class="right"><div class="arabic">$ugstr</div></td>
        </tr>
        <tr>
            <td class="left"><b>Pinyin Y&#x00E9;ziqi</b>:</td>
            <td class="right">$pinstr</td>
        </tr>
        <tr>
            <td class="left"><b>Cyrillic</b>:</td>
            <td class="right">$cyrstr</td>
        </tr>
    </table>
HTMLresults

}
								#Regardless of whether or not input has been entered, show the footer of the website
print <<HTMLfooter;
    <br style="clear:both"/>
        <hr>
        <p class="mini">Script by <a href="/~sjpa">Stephen Politzer-Ahles</a>. If you experience
                                 an error, contact me at politzerahless <img src="/~sjpa/at.jpg" alt="(at)"
                                 height="10px" width="10px"> gmail <img src="/~sjpa/dot.jpg" alt="(dot)"
                                 height="10px" width="10px"> com.
                                 <span style="float:right"><a href="/~sjpa/chinesetools.html">back to 
                                 Chinese/Uyghur tools</a></span></p>
        <p class="mini">A similar tool is available at <a href="http://www.uyghurdictionary.org/tools.asp">The 
                        Uyghur-English Dictionary project</a>.</p>
        <dl class="mini">Version history:
            <dd><a href="/~sjpa/uyghurscript_code_20091130.txt">2009-11-30</a>: Created</dd>
            <dd><a href="/~sjpa/uyghurscript_code_20091201.txt">2009-12-01</a>: Added some Pinyin Y&#x00E9;ziqi
                and Cyrillic functionality, corrected several errors caused by punctuation and capitalization.</dd>
            <dd><a href="/~sjpa/uyghurscript_code_20091208.txt">2009-12-08</a>: Added some missing letters.</dd>
            <dd><a href="/~sjpa/uyghurscript_code_20091215.txt">2009-12-15</a>: Replaced  ULY &#x00E9; with
                &#x00EB;; added Cyrillic bigrams &#x044E; and &#x044F;.</dd>
            <dd><a href="/~sjpa/uyghurscript_code_20120415.txt">2012-14-15</a>: fixed Cyrillic &#x0422; and &#x0442;.</dd>
        </dl>

    </body>
</html>
HTMLfooter


sub hex_to_dec{
		#Function documentation
		#Takes a hex number and turns it into a decimal number, which is returned

		$hex = shift();					#Get the argument
		$dec = 0;					#Initialize the $dec variable to 0	

		$pos = 0;					#The place (start at ones place, then go up to 10s, 100s, etc.)
		
		while( $hex ){		
  			$digit = numberify( chop( $hex ) );	#Get the last hex digit from the number and convert it to decimal
			$dec += $digit*( 16**$pos );		#Add that to $dec
			$pos += 1;				#Go up to the next place
		}
		
		return $dec;
}

sub dec_to_hex{
		#Function documentation
		#Takes a decimal number and turns it into a hex number, which is returned

		$dec = shift();					#Get the argument
		$hex = '';					#Initialize the $hex variable to an empty string
		
		while( $dec ){
			$digit = hexnumberify( $dec % 16 );	#Get the last bit of the decimal (using modulus division) and convert it into a hex digit
			$hex = $digit . $hex;			#Add the digit to $hex
			$dec = int( $dec/16 );			#Go up to the next place of the decimal (by removing the part from the end that was just converted to hex)
		}

		return $hex;
}

sub numberify{
		#Function documentation
		#Takes a single hex digit in string format (from 1 to F) and converts it to a decimal number
    		$x = shift();					#Get the argument
		
		if( $x eq "1" ){ $x = 1; }			#Take the hex digit and convert it to a decimal number
		elsif( $x eq "2" ){ $x = 2; }
		elsif( $x eq "3" ){ $x = 3; }
		elsif( $x eq "4" ){ $x = 4; }
		elsif( $x eq "5" ){ $x = 5; }
		elsif( $x eq "6" ){ $x = 6; }
		elsif( $x eq "7" ){ $x = 7; }
		elsif( $x eq "8" ){ $x = 8; }
		elsif( $x eq "9" ){ $x = 9; }
		elsif( $x eq "A" ){ $x = 10; }
		elsif( $x eq "B" ){ $x = 11; }
		elsif( $x eq "C" ){ $x = 12; }
		elsif( $x eq "D" ){ $x = 13; }
		elsif( $x eq "E" ){ $x = 14; }
		elsif( $x eq "F" ){ $x = 15; }
		
		return $x
}

sub hexnumberify{
		#Function documentation
		#Takes a decimal number below 16 in number format and converts it to a hex digit
    		$x = shift();					#Get the argument
		
		if( $x < 10 ){ }				#If the decimal is below 10, do nothing
		elsif( $x == 10 ){ $x = 'A'; }			#If the decimal is above 10, turn it into one of the hex letters
		elsif( $x == 11 ){ $x = 'B'; }
		elsif( $x == 12 ){ $x = 'C'; }
		elsif( $x == 13 ){ $x = 'D'; }
		elsif( $x == 14 ){ $x = 'E'; }
		elsif( $x == 15 ){ $x = 'F'; }
		
		return $x
}

sub convert_ug_lat{
	#Function documentation
	#Converts Uyghur Arabic script to Uyghur Latin script
	#(Currently does everything in lowercase. It would be cool to have a list of proper nouns that must be capitalized)

	$string = shift();					#Get the input
		
	$decodedstr = decode( "utf8", $string );           	#Decode characters from text into binary
	$newtr = "";						#Initialize the new Latin string to an empty string
	while( $x = chop($decodedstr) ){			#Get one character at a time off the end
		$x = dec_to_hex( ord( $x ) );			#Turn the Unicode decimal character into hex (see dec_to_hex() function above)

								### The next bit goes through the list of Unicode points in %latincodes until it finds this character
		$matched = 0;					#This variable will keep track of whether or not we found a match							
		foreach $item ( keys(%latincodes) ){		#Go through the list of codes
			if( $latincodes{ $item } =~ m/$x/ ){	#If the code $x matches one of the codes in %latincodes{ $item }
		 		$newstr = $item . $newstr;	#Add the letter to $newstr, the new Latin string that we're building
				$matched = 1;			#Flag to know that we did after all find the letter
				last;				#Exit the loop, since we found our match
			}
		}

		if( $matched == 0){				#If we got through all the letters and found no match (i.e., this is not an Arabic script letter):
								#Convert the letter from Unicode back into its original encoding
			$letter = encode("utf8", chr( hex_to_dec($x) ) );	
			$newstr = "$letter" . $newstr;		#And just concatenate it, in its plain form, back onto the Latin string
		}

		$finalstr = $newstr;				#This is the completed Latin string
		$finalstr =~ s/(^|\W)'/\1/;			#If there's a hamza (apostrophe) at the beginning of a word, remove it
		$finalstr =~ s/(^|\.\s+)(\w)/\1\u\2/g;		#Capitalize the first word

								### Fix the capitalization of various special characters (I don't remember what this means! Have to look into it...)
		$finalstr =~ s/(^|\.\s)&#x00E9;/\1&#x00C9;/g;
		$finalstr =~ s/(^|\.\s)&#x00EB;/\1&#x00CB;/g;
		$finalstr =~ s/(^|\.\s)&#x00F6;/\1&#x00D6;/g;
		$finalstr =~ s/(^|\.\s)&#x00FC;/\1&#x00DC;/g;

		$finalstr =~ s/(\S)&#x00C9/\1&#x00E9/g;
		$finalstr =~ s/(\S)&#x00CB/\1&#x00EB/g;
		$finalstr =~ s/(\S)&#x00D6/\1&#x00F6/g;
		$finalstr =~ s/(\S)&#x00DC/\1&#x00FC/g;

	}
	return $finalstr;

}

sub convert_lat_ug{
	#Function documentation
	#Converts Uyghur Latin script to Uyghur Arabic script
	#Tasks remaining: add list of words with word-medial hamza, like sun'i and din'i. The current version of the script only puts hamzas
	#  in word-initial position, and thus if the user doesn't write the Latin with the apostrophe then this will incorrectly write the Arabic
	#  without the hamza. But some of these words, like sun'i and din'i, have weird syllabification ([sun.i] rather than [su.ni]), and
	#  don't have normally syllabified counterparts (i.e. there is no "suni" minimal pair of "sun'i"), so in ULY they are typically written
	#  without the apostrophe because the apostrophe is not needed for disambiguation. In UEY, though, the hamza is required.
	$string = shift();					#Get the input
	$newstr = "";						#Initialize the new Arabic string to an empty string	
	while( $string ){					### Decode only fancy letters (ones that don't have a plain ASCII). Keep the plain ASCII letters the way they are.
								###  This is because the plain letters can be easily associated with their Arabic counterparts in %latincodes (the
								###  plain letters are themselves keys in the hash). But the fancy letters can't (there aren't fancy letter keys
								###  in the hash; the keys are the fancy letters' Unicode points)
		$string = decode("utf8", $string);
		 while( $x = chop($string) ){			#Take one letter at a time off the end of the string
			$x = dec_to_hex( ord( $x ) );		#Convert the letter to hex (see dec_to_hex() function above)
			if( $x =~ m/(201C|201D)/ ){ $x = 0022; }#Convert curly quotes to straight quotes
			$x = "&#x" . $x . ";";
			$matched = 0;
			foreach( keys(%latincodes) ){		#Go through the list of keys in %latincodes to see if this Unicode point is in there
								#If this Unicode point is, that means this is a fancy letter; keep it as Unicode
				if( $x eq $_ ){ $matched = 1; last;}									 
			}
			
			if( $matched == 0 ){		 	#If we get through all the keys in %latincodes and don't find this Unicode point, that means
								#  this is a plain letter; so don't keep it as Unicode, rather, turn it back to a plain letter
				$x =~ s/&#x(\S{4});/\1/; 	#(I don't remember what this line does! Have to look into it...)
				$x = encode("utf8", chr( hex_to_dec( $x ) ) );
			}
			$decodedstr = $x . $decodedstr;
								
		}
	}
					 
	while( $decodedstr ){					### Here's the actual conversion
		$lastdecodedstr = $decodedstr;
								#Split the string into individual letters, while catching bigraphs (pairs of Latin characters that represent a single Arabic character) and remaining fancy characters in the regex below
		$decodedstr =~ s/^(&#x00F6;|&#x00D6;|&#x00FC;|&#x00DC;|&#x00EB;|&#x00CB;|&#x00E9;|&#x00C9;|&#x003F;|&#x00AB;|&#x00BB|zh|gh|sh|ch|ng|\n|[hy'sutjloxrnimzfqbgadekvwp ??.,;!?"\-\d\/])//i;
										
								#Error handler. Goes off if the string was unable to be split (i.e., if there were no recognizable letters).
		if($decodedstr eq $lastdecodedstr){ $newstr = "Aborting.\n"; last; }
					 
		$letter = $1;	 				#Grab the first letter from the regex
		$ugletter = $letter;				#$ugletter will be the Uyghur equivalent of this Latin letter
		foreach $code (keys(%latincodes)){		#Go through the list of keys in %latincodes
			if( $letter =~ m/\A$code\Z/i ){     	#If a key corresponds to the Latin letter, get the Arabic letter for this Latin letter
				$ugletter = $latincodes{ $code };						
				$ugletter =~ s/(\S{4}).*/&#x\1;/; #Strip the extra codes from the list; for display purposes, we only need the first one	 
			}	 				#If we don't find a match (e.g., if this character is punctuation), just keep it as it is.
		}
					 
		$newstr = $newstr . $ugletter; 			#Add this Uyghur letter to $newstr
								#Add hamza at the beginning of each word if the first character of the word is a vowel
		$newstr =~ s/(^|\s)(&#x06D0;|&#x06C6;|&#x06C8;|&#x06C7;|&#x0648;|&#x0649;|&#x0627;|&#x06D5;)/\1&#x0626;\2/g;
		$newstr =~s/(\S)&#x00AB;/\1&#x00BB/g;		#Fix a problem with guillemets (I think this removes them; I don't remember, though)
	}
		
	return $newstr;

}

sub convert_lat_pin{
	#Function documentation
	#Converts Uyghur Latin script to Uyghur Pinyin script
	#Inputs are a Latin string, and a string indicating whether the input is raw ("uncoded": in the case of user input from the webpage) or
	#  already Unicode-encoded ("coded": in the case of output from one of the other functions being fed into this function)

	$string = shift();					#Get the input
	$newstr = "";						#Initialize the new Arabic string to an empty string	

	if( $_[0] eq "uncoded" )

	while( $string ){					### If the input to this function is not encoded, then Decode only fancy letters (ones that don't have a plain ASCII). Keep the plain ASCII letters the way they are.
								###  This is because the plain letters can be easily associated with their Arabic counterparts in %latincodes (the
								###  plain letters are themselves keys in the hash). But the fancy letters can't (there aren't fancy letter keys
								###  in the hash; the keys are the fancy letters' Unicode points)
		$string = decode("utf8", $string);
		 while( $x = chop($string) ){			#Take one letter at a time off the end of the string
			$x = dec_to_hex( ord( $x ) );		#Convert the letter to hex (see dec_to_hex() function above)
								#Convert curly quote to straight quote
				if( $x =~ m/(201C|201D)/ ){ $x = 0022; }
				$x = "&#x" . $x . ";";
			foreach( keys(%latincodes) ){		#Go through the list of keys in %latincodes to see if this Unicode point is in there
				if( $x eq $_ ){ $matched = 1; last;} #If this Unicode point is, that means this is a fancy letter; keep it as Unicode									 
			}
			
			if( $matched == 0 ){		 	#If we get through all the keys in %latincodes and don't find this Unicode point, that means
								#  this is a plain letter; so don't keep it as Unicode, rather, turn it back to a plain letter
				$x =~ s/&#x(\S{4});/\1/; 	#(I don't remember what this line does! Have to look into it...)
				$x = encode("utf8", chr( hex_to_dec( $x ) ) );
			}
			$decodedstr = $x . $decodedstr;
		}
	}
	}
	elsif( $_[0] eq "coded" ){				#If the input to the function is already encoded, don't do that stuff above
		$decodedstr = $string;
	}

	while( $decodedstr ){				 	 ### Here's the actual conversion
		$lastdecodedstr = $decodedstr;
								#Split the string into individual letters, while catching bigraphs (pairs of Latin characters that represent a single Arabic character) and remaining fancy characters in the regex below
		$decodedstr =~ s/^(&#x00F6;|&#x00D6;|&#x00FC;|&#x00DC;|&#x00EB;|&#x00CB;|&#x00E9;|&#x00C9;|&#x003F;|&#x00AB;|&#x00BB|zh|gh|sh|ch|ng|\n|[hy'sutjloxrnimzfqbgadekvwp ??.,;!?"\-\d\/])//i;
										
								#Error handler. Goes off if the string was unable to be split (i.e., if there were no recognizable letters).
		if ($decodedstr eq $lastdecodedstr){ $newstr = "<font color=\"red\">Unreadable input.</font> Aborting at $newstr."; last; }
					 
		$letter = $1;	 				#Grab the first letter from the regex

		if( $letter eq "e" ){ $pinletter = "&#x0259;"; }#For letters that have a different Pinyin than Latin letter, convert them. 		
		elsif( $letter eq "E" ){ $pinletter = "&#x018F;"; }
		elsif( $letter eq "ch" ){ $pinletter = "q"; }
		elsif( $letter eq "Ch" ){ $pinletter = "Q"; }
		elsif( $letter eq "x" ){ $pinletter = "h"; }
		elsif( $letter eq "X" ){ $pinletter = "H"; }
		elsif( $letter eq "zh" ){ $pinletter = "&#x2C6C;"; }
		elsif( $letter eq "Zh" ){ $pinletter = "&#x2C6B;"; }
		elsif( $letter eq "sh" ){ $pinletter = "x"; }
		elsif( $letter eq "Sh" ){ $pinletter = "X"; }
		elsif( $letter eq "gh" ){ $pinletter = "&#x01A3;"; }
		elsif( $letter eq "Gh" ){ $pinletter = "&#x01A2;"; }
		elsif( $letter eq "q" ){ $pinletter = "&#x2C6A;"; }
		elsif( $letter eq "Q" ){ $pinletter = "&#x2C69;"; }
		elsif( $letter eq "h" ){ $pinletter = "&#x2C68;"; }
		elsif( $letter eq "H" ){ $pinletter = "&#x2C67;"; }
		elsif( $letter eq "&#x00F6;" ){ $pinletter = "&#x0275;"; }
		elsif( $letter eq "&#x00D6;" ){ $pinletter = "&#x019F;"; }
		elsif( $letter eq "&#x00E9;" ){ $pinletter = "e"; }
		elsif( $letter eq "&#x00C9;" ){ $pinletter = "E"; }
		elsif( $letter eq "&#x00EB;" ){ $pinletter = "e"; }
		elsif( $letter eq "&#x00CB;" ){ $pinletter = "E"; }
		else{ $pinletter = $letter; }			#For letters that don't have a different Pinyin than Latin letter, just leave them as is
		
		
					 
		$newstr = $newstr . $pinletter; 		#Concatenate the Pinyin letter to the $newstr
	}
		
	return $newstr;

}

sub convert_lat_cyr{
	#Function documentation
	#Converts Uyghur Latin script to Uyghur Cyrillic script
	#Inputs are a Latin string, and a string indicating whether the input is raw ("uncoded": in the case of user input from the webpage) or
	#  already Unicode-encoded ("coded": in the case of output from one of the other functions being fed into this function)

	$string = shift();					#Get the input
	$newstr = "";						#Initialize the new Arabic string to an empty string	

	if( $_[0] eq "uncoded" )

	while( $string ){					### If the input to this function is not encoded, then Decode only fancy letters (ones that don't have a plain ASCII). Keep the plain ASCII letters the way they are.
								###  This is because the plain letters can be easily associated with their Arabic counterparts in %latincodes (the
								###  plain letters are themselves keys in the hash). But the fancy letters can't (there aren't fancy letter keys
								###  in the hash; the keys are the fancy letters' Unicode points)
		$string = decode("utf8", $string);
		 while( $x = chop($string) ){			#Take one letter at a time off the end of the string
			$x = dec_to_hex( ord( $x ) );		#Convert the letter to hex (see dec_to_hex() function above)
								#Convert curly quote to straight quote
				if( $x =~ m/(201C|201D)/ ){ $x = 0022; }
				$x = "&#x" . $x . ";";
			foreach( keys(%latincodes) ){		#Go through the list of keys in %latincodes to see if this Unicode point is in there
				if( $x eq $_ ){ $matched = 1; last;} #If this Unicode point is, that means this is a fancy letter; keep it as Unicode									 
			}
			
			if( $matched == 0 ){		 	#If we get through all the keys in %latincodes and don't find this Unicode point, that means
								#  this is a plain letter; so don't keep it as Unicode, rather, turn it back to a plain letter
				$x =~ s/&#x(\S{4});/\1/; 	#(I don't remember what this line does! Have to look into it...)
				$x = encode("utf8", chr( hex_to_dec( $x ) ) );
			}
			$decodedstr = $x . $decodedstr;
		}
	}
	}
	elsif( $_[0] eq "coded" ){				#If the input to the function is already encoded, don't do that stuff above
		$decodedstr = $string;
	}

	while( $decodedstr ){				 	 ### Here's the actual conversion
		$lastdecodedstr = $decodedstr;
								#Split the string into individual letters, while catching bigraphs (pairs of Latin characters that represent a single Arabic character) and remaining fancy characters in the regex below
		$decodedstr =~ s/^(&#x00F6;|&#x00D6;|&#x00FC;|&#x00DC;|&#x00EB;|&#x00CB;|&#x00E9;|&#x00C9;|&#x003F;|&#x00AB;|&#x00BB|zh|gh|sh|ch|ng|\n|[hy'sutjloxrnimzfqbgadekvwp ??.,;!?"\-\d\/])//i;
										
								#Error handler. Goes off if the string was unable to be split (i.e., if there were no recognizable letters).
		if ($decodedstr eq $lastdecodedstr){ $newstr = "<font color=\"red\">Unreadable input.</font> Aborting at $newstr."; last; }
		$letter = $1;	 				#Grab the first letter from the regex

		if( $letter eq "e" ){ $cyrletter = "&#x0259;"; } #For letters that have a different Cyrillic than Latin letter, convert them. 
		elsif( $letter eq "E" ){ $cyrletter = "&#x018F;"; }
		elsif( $letter eq "a" ){ $cyrletter = "&#x0430;"; }
		elsif( $letter eq "A" ){ $cyrletter = "&#x0410;"; }
		elsif( $letter eq "b" ){ $cyrletter = "&#x0431;"; }
		elsif( $letter eq "B" ){ $cyrletter = "&#x0411;"; }
		elsif( $letter eq "p" ){ $cyrletter = "&#x043F;"; }
		elsif( $letter eq "P" ){ $cyrletter = "&#x041F;"; }
		elsif( $letter eq "x" ){ $cyrletter = "&#x0445;"; }
		elsif( $letter eq "X" ){ $cyrletter = "&#x0425;"; }
		elsif( $letter eq "j" ){ $cyrletter = "&#x0497;"; }
		elsif( $letter eq "J" ){ $cyrletter = "&#x0496;"; }
		elsif( $letter eq "ch" ){ $cyrletter = "&#x0447;"; }
		elsif( $letter eq "Ch" ){ $cyrletter = "&#x0427;"; }
		elsif( $letter eq "d" ){ $cyrletter = "&#x0434;"; }
		elsif( $letter eq "D" ){ $cyrletter = "&#x0414;"; }
		elsif( $letter eq "r" ){ $cyrletter = "&#x0440;"; }
		elsif( $letter eq "R" ){ $cyrletter = "&#x0420;"; }
		elsif( $letter eq "z" ){ $cyrletter = "&#x0437;"; }
		elsif( $letter eq "Z" ){ $cyrletter = "&#x0417;"; }
		elsif( $letter eq "zh" ){ $cyrletter = "&#x0436;"; }
		elsif( $letter eq "Zh" ){ $cyrletter = "&#x0416;"; }
		elsif( $letter eq "s" ){ $cyrletter = "&#x0441;"; }
		elsif( $letter eq "S" ){ $cyrletter = "&#x0421;"; }
		elsif( $letter eq "sh" ){ $cyrletter = "&#x0448;"; }
		elsif( $letter eq "Sh" ){ $cyrletter = "&#x0428;"; }
		elsif( $letter eq "gh" ){ $cyrletter = "&#x0493;"; }
		elsif( $letter eq "Gh" ){ $cyrletter = "&#x0492;"; }
		elsif( $letter eq "f" ){ $cyrletter = "&#x0444;"; }
		elsif( $letter eq "F" ){ $cyrletter = "&#x0424;"; }
		elsif( $letter eq "q" ){ $cyrletter = "&#x049B;"; }
		elsif( $letter eq "Q" ){ $cyrletter = "&#x049A;"; }
		elsif( $letter eq "k" ){ $cyrletter = "&#x043A;"; }
		elsif( $letter eq "K" ){ $cyrletter = "&#x041A;"; }
		elsif( $letter eq "g" ){ $cyrletter = "&#x0433;"; }
		elsif( $letter eq "G" ){ $cyrletter = "&#x0413;"; }
		elsif( $letter eq "ng" ){ $cyrletter = "&#x04A3;"; }
		elsif( $letter eq "Ng" ){ $cyrletter = "&#x04A2;"; }
		elsif( $letter eq "l" ){ $cyrletter = "&#x043B;"; }
		elsif( $letter eq "L" ){ $cyrletter = "&#x041B;"; }
		elsif( $letter eq "m" ){ $cyrletter = "&#x043C;"; }
		elsif( $letter eq "M" ){ $cyrletter = "&#x041C;"; }
		elsif( $letter eq "n" ){ $cyrletter = "&#x043D;"; }
		elsif( $letter eq "N" ){ $cyrletter = "&#x041D;"; }
		elsif( $letter eq "h" ){ $cyrletter = "&#x04BB;"; }
		elsif( $letter eq "H" ){ $cyrletter = "&#x04BA;"; }
		elsif( $letter eq "o" ){ $cyrletter = "&#x043E;"; }
		elsif( $letter eq "O" ){ $cyrletter = "&#x041E;"; }
		elsif( $letter eq "u" ){ $cyrletter = "&#x0443;"; }
		elsif( $letter eq "U" ){ $cyrletter = "&#x0423;"; }
		elsif( $letter eq "t" ){ $cyrletter = "&#x0442;"; }
		elsif( $letter eq "T" ){ $cyrletter = "&#x0422;"; }
		elsif( $letter eq "&#x00F6;" ){ $cyrletter = "&#x04E8;"; }
		elsif( $letter eq "&#x00D6;" ){ $cyrletter = "&#x04E9;"; }
		elsif( $letter eq "&#x00FC;" ){ $cyrletter = "&#x04AF;"; }
		elsif( $letter eq "&#x00DC;" ){ $cyrletter = "&#x04AE;"; }
		elsif( $letter eq "v" || $letter eq "w" ){ $cyrletter = "&#x0432;"; }
		elsif( $letter eq "V" || $letter eq "W" ){ $cyrletter = "&#x0412;"; }
		elsif( $letter eq "&#x00E9;" ){ $cyrletter = "&#x0435;"; }
		elsif( $letter eq "&#x00C9;" ){ $cyrletter = "&#x0415;"; }
		elsif( $letter eq "&#x00EB;" ){ $cyrletter = "&#x0435;"; }
		elsif( $letter eq "&#x00CB;" ){ $cyrletter = "&#x0415;"; }
		elsif( $letter eq "i" ){ $cyrletter = "&#x0438;"; }
		elsif( $letter eq "I" ){ $cyrletter = "&#x0418;"; }
		elsif( $letter eq "y" ){ $cyrletter = "&#x0439;"; }
		elsif( $letter eq "Y" ){ $cyrletter = "&#x0419;"; }
		elsif( $letter eq "yu" ){ $cyrletter = "&#x044E;"; }
		elsif( $letter eq "Yu" ){ $cyrletter = "&#x042E;"; }
		elsif( $letter eq "ya" ){ $cyrletter = "&#x044F;"; }
		elsif( $letter eq "Ya" ){ $cyrletter = "&#x042F;"; }
		else{ $cyrletter = $letter; }			#For letters that don't have a different Cyrillic than Latin letter, just leave them as is
			 
		$newstr = $newstr . $cyrletter; 		#Concatenate the Cyrillic letter to the $newstr 
	}
	return $newstr;
}
exit;